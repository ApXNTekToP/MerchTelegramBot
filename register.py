# Import
import telebot
import database
import keyboard_bot
import routing
import re

# Bot Connect
token_bot = "1614577997:AAHECoJ6qH6DrKS-MNO1WSUc9HZ5RFr512c"
bot = telebot.TeleBot(token_bot)

# database check connect
connection = database.create_connection(
    "merch_telegram_bot_db", "postgres", "Qsf98%x$", "127.0.0.1", "5432"
)
connection.close()
user_dict = {}


class User(object):
    # Create user profile
    def __init__(self, first_name, last_name, address,
                 email, phone, username, chat_id):
        if username is None:
            self.username = None
        else:
            self.username = '@' + username
        self.last_name = last_name
        if address == "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç  üóø":
            self.address = None
        else:
            self.address = address
        self.email = email
        self.phone = phone
        self.first_name = first_name
        self.chat_id = chat_id


def send_welcome(message):
    register_menu = keyboard_bot.show_button_register()
    # main_menu = keyboard_bot.show_button_main_menu()
    bot.send_message(message.from_user.id, message.from_user.first_name +
                     '\n–õ–∞–º–ø–æ–≤–æ–µ –º–∞—Å–ª–æ? –í–µ—Ä–µ–≤–∫–∏? –ë–æ–º–±—ã?'
                     '\n–¢–µ–±–µ –≤—Å—ë —ç—Ç–æ –Ω—É–∂–Ω–æ?'
                     '\n–û–Ω–æ —Ç–≤–æ—ë, –º–æ–π –¥—Ä—É–≥... –µ—Å–ª–∏ —É —Ç–µ–±—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–ø–∏–π üíé')
    bot.send_message(message.from_user.id, '\n–ß—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ '
                                           '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
                     reply_markup=register_menu)


@bot.message_handler(content_types=['text'])
def register_function(message):
    message.text = message.text.replace(" ", "").lower()
    if re.findall(r'–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úè' or r'–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
                  message.text):
        delete_keyboards = keyboard_bot.delete_keyboard()
        msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é, –ò–º—è.\n'
                                    '–§–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò–º—è\n'
                                    '–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω',
                           reply_markup=delete_keyboards)
        bot.register_next_step_handler(msg, process_name_step)


def process_name_step(message):
    try:
        pattern = r'[–ê-–Ø–Å–∞-—è—ë]+'
        user_response = re.findall(pattern, message.text)
        if len(user_response) < 2:
            msg = bot.reply_to(message, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!\n'
                                        '–§–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò–º—è\n'
                                        '–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω')
            bot.register_next_step_handler(msg, process_name_step)
            return
        else:
            user_dict['last_name'] = user_response[0]
            user_dict['first_name'] = user_response[1]
            skip_button = keyboard_bot.skip()
            msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.\n'
                                        '–§–æ—Ä–º–∞—Ç: —É–ª–∏—Ü–∞, –¥–æ–º, –≥–æ—Ä–æ–¥, –ø–æ—á—Ç–æ–≤–æ–π '
                                        '–∏–Ω–¥–µ–∫—Å\n'
                                        '–ù–∞–ø—Ä–∏–º–µ—Ä: –°–µ—Å–ª–∞–≤–∏–Ω—Å–∫–∞—è —É–ª., 22, '
                                        '–ú–æ—Å–∫–≤–∞, 121309',
                               reply_markup=skip_button)
            bot.register_next_step_handler(msg, process_address_delivery_step)
    except Exception as e:
        bot.reply_to(message, '–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞!')
        return


def process_address_delivery_step(message):
    try:
        user_response = message.text.replace(" ", "").lower()
        if re.findall(r'–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å—à–∞–≥‚úè' or r'–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å—à–∞–≥',
                      user_response):
            user_dict['address'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç  üóø"
            delete_keyboards = keyboard_bot.delete_keyboard()
            msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π '
                                        '–ø–æ—á—Ç—ã.\n'
                                        '–ù–∞–ø—Ä–∏–º–µ—Ä: example@test.com',
                               reply_markup=delete_keyboards)
            bot.register_next_step_handler(msg, process_email_step)
        else:
            pattern = r'(?:[–ê-–Ø–Å–∞-—è—ë\d]+)'
            user_response = re.findall(pattern, message.text)
            if len(user_response) < 5:
                msg = bot.reply_to(message, '–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å \n'
                                            '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –µ—â–µ —Ä–∞–∑!\n'
                                            '–ù–∞–ø—Ä–∏–º–µ—Ä: –°–µ—Å–ª–∞–≤–∏–Ω—Å–∫–∞—è —É–ª., 22, '
                                            '–ú–æ—Å–∫–≤–∞, 121309')
                bot.register_next_step_handler(msg,
                                               process_address_delivery_step)
            else:
                delete_keyboards = keyboard_bot.delete_keyboard()
                user_response = ' '.join(user_response)
                user_dict['address'] = user_response
                msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π '
                                            '–ø–æ—á—Ç—ã.\n'
                                            '–ù–∞–ø—Ä–∏–º–µ—Ä: example@test.com',
                                   reply_markup=delete_keyboards)
                bot.register_next_step_handler(msg, process_email_step)
    except Exception as e:
        bot.reply_to(message, '–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞!')
        return


def process_email_step(message):
    try:
        pattern = r'[A-Za-z0-9\.]+[@][A-Za-z0-9]+[.][A-Za-z]{2,3}'
        user_response = re.findall(pattern, message.text)
        if len(user_response) < 1:
            msg = bot.reply_to(message, '–û—à–∏–±–∫–∞! –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ—á—Ç–∞!\n'
                                        '–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –µ—â–µ —Ä–∞–∑!\n'
                                        '–ù–∞–ø—Ä–∏–º–µ—Ä: example@test.com')
            bot.register_next_step_handler(msg, process_email_step)
            return
        else:
            user_dict['email'] = user_response[0]
            msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n'
                                        '–ù–∞–ø—Ä–∏–º–µ—Ä: 89998887766')
            bot.register_next_step_handler(msg, process_phone_step)
    except Exception as e:
        bot.reply_to(message, '–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞!')
        return


def process_phone_step(message):
    try:
        pattern = r'([0-9]{11})'
        user_response = re.findall(pattern, message.text)
        if len(user_response) < 1:
            msg = bot.reply_to(message, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ '
                                        '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑!\n'
                                        '–ù–∞–ø—Ä–∏–º–µ—Ä: 89998887766')
            bot.register_next_step_handler(msg, process_phone_step)
            return
        else:
            main_menu = keyboard_bot.show_button_main_menu()
            user_dict['phone'] = user_response[0]
            bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!',
                             reply_markup=main_menu)
            bot.send_message(message.from_user.id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–§–∞–º–∏–ª–∏—è: '
                             + user_dict['last_name'] +
                             '\n–ò–º—è: '
                             + user_dict['first_name'] +
                             '\n–ê–¥—Ä–µ—Å: '
                             + user_dict['address'] +
                             '\n–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: '
                             + user_dict['email'] +
                             '\n–¢–µ–ª–µ—Ñ–æ–Ω: '
                             + user_dict['phone'],
                             reply_markup=main_menu)
            user_object = User(user_dict['first_name'], user_dict['last_name'],
                               user_dict['address'], user_dict['email'],
                               user_dict['phone'], message.from_user.username,
                               message.from_user.id)
            database.ProfileInteraction.insert_record(user_object)
    except Exception as e:
        bot.reply_to(message, '–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞!')
        return


# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling
# register_next_step_handler()) saving will hapen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default
# "./.handlers-saves/step.save") WARNING It will work only if
# enable_save_next_step_handlers was called!
bot.load_next_step_handlers()
